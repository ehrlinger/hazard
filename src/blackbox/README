This is the second version of the Blackbox program.

In this version we've added a new driver program to make it more like a 
true blackbox. This requires the user to be intimately familiar with their 
data set. 

1.) Installation:

Because blackbox uses many routines from hazpred, we've built blackbox with 
libraries from the hazard and hazpred programs. Therefore you will need to 
build the complete hazard package in order to compile and run blackbox.

These instructions assume you are running on a *nix variant. If you are 
running on windows, you will probably first need to install cygwin from 
http://sources.redhat.com/cygwin/

This will give you the ability to compile and run many Unix based utilities.

We assume that the hazard package has been unloaded into a $HAZARDSRC 
directory. We will reference everything from this directory. The source package
will name this hazard in whatever directory you've unpacked the sources.

The blackbox program will then be located in $HAZARDSRC/src/blackbox.

To build hazard and the blackbox:

cd $HAZARDSRC

and run 

./configure
make

This will build all the executables necessary to run hazard, hazpred and the 
blackbox programs. For blackbox, change back into this directory.

cd $HAZARDSRC/src/blackbox

2.) Analysis:

you will see 2 executable files.

2a.) hzpexmpl: This program is written explicitly for the hmdeadp.xport data 
set, which was generated by the hmdeadp.sas program, and it's SAS dataset... 
as explained below, and in the document $HAZARDSRC/doc/blackbox.doc. hzpexmpl 
is generated by hzpexmpl.c. 

You can modify and use hzpexmpl by editing the file hzpexmpl.c to match your 
requirements. This will require a recompile in order to generate a new hzpexmpl
executable to run your changes though. It can all be done from this directory, 
once you have built the hazard system once. From the command line in the 
directory $HAZARDSRC/src/blackbox, simply run make, and your new hzpexmpl 
program will be created.

Run the example with the command:

hzexmpl hzpdead.xport

2b.) blackbox: This is the generic blackbox program. The difference between
blackbox and hzpexmpl are that changes do not need to be compiled into
blackbox. Blackbox does not require any specific knowledge about the data set
at compile time, all parameters are passed in from the command line at run 
time.

The syntax is:

./blackbox  xport_filename timestep t_n num_vars vars...

Where:

xport_filename = the xport file generated from hazard in the SAS job 
                 (hzpdead.xport)
timestep       = the size of the time step you want to generate your data at.
t_n            = end time (we assume a start time of 0.)
num_vars       = the number of predictor variables in the model
vars	       = The variable values in your model
                 (we need this to analyze the dataset you generated)

So to create an example similar to the hzexmpl program, execute

For patient 1:
./blackbox hmdeadp.xport 1 72 7 57 3 0 0 0 0 0

For patient 2:
./blackbox hmdeadp.xport 1 72 7 59 3 3 0 0 1 0

For patient 3:
./blackbox hmdeadp.xport 1 72 7 63 4 4 0 0 0 1

For patient 4:
./blackbox hmdeadp.xport 1 72 7 51 3 0 0 1 0 0

For patient 5:
./blackbox hmdeadp.xport 1 72 7 48 4 0 1 1 1 0

For patient 6:
./blackbox hmdeadp.xport 1 72 7 50 3 3 1 1 1 1

In all cases, we are analyzing the hmdeadp.xport file. We are taking time steps
of 1 month, for 72 months. There are 7 variables...

AGE_COP
NYHA
MV_NYHA
COMBINED_VALVE      (0,1)
AO_PINC             (0,1)
BLACK               (0,1) 
I_PATH              (0,1)

Output is, by column
 MONTHS    PCT_SURV    PCT_CLLS    PCT_CLUS     _HAZARD     _CLLHAZ     _CLUHAZ

CLL = lower confidence limit
CLU = upper confidence limit

Blackbox does have a couple of hard coded nuances:

1.) We assume a monthly time step in the analysis... actually, it probably 
doesn't matter as long as you want time steps in the time unit you have used.
The program will only use a standard, fixed length time step.

2.) Because we create a table of monthly output, the program automatically
makes sure there is a data point at a set of particular months 

30/365.25, 1, 3, 5, 10, 12, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60,
and t_n+2*timestep

These will be interspersed in your output, even if you don't ask for them. They
will also be out of order, since we only generate them when we see we missed 
one.
 

----- README from original versions -----

The file you have just unpacked contains the HAZPRED Core Logic bundle,
a/k/a the HAZPRED "Black Box", and its supplemental routines.  In this
directory, you should now find the following files:

1. This README file

2. A number of *.c and *.h files, among which ibmieee.c changes the float
   representation between IBM and IEEE formats.  xportHandler.c is written
   to read in SAS transport files containing all estimates (model parameters, 
   concomitant variables, and variance-covariances).  hzpexmpl.c is a driver
   program to test the whole bundle.  hzpcor.c and hzdcor.c are core routines,
   and hzpblk.c allows you to handle multiple control block sets.

3. A Makefile, that not only automates the compiling process, but also
   documents the relation between these .c and .h files. Although we use
   gnu's gcc, we also tested with cc. If gcc is not available in your system,
   just change the line "CC = gcc" to "CC = cc", and the option "-ansi" in 
   CFLAGS to "-Aa" to use ANSI C.
   
   Please also note the other options in CFLAGS.  The commented out -DDEBUG is
   for debug purpose; if it is not uncommented, most relevant transport file
   contents will be displayed. -DFLOATREP is to specify how the float is
   represented on your platform. FLOATREP should be set to one of these three
   strings CN_TYPE_IEEEB, CN_TYPE_IEEEL, or CN_TYPE_XPORT, for big endian IEEE,
   little endian IEEE, and transport format (i.e. IBM) respectively.  If
   BIG_ENDIAN (LITTLE_ENDIAN) is defined, it is assumed that your platform
   is big (little) endian. If you are not sure, you can elect not to define
   them. The program will figure out these for you, suffering a little bit of
   efficiency. Following is a partial list:
   
   hardware	          OS		float type	endian
   -------------  -------------------   ----------      ------
   IBM mainframe  MVS,CMS,VSE		IBM		big
   Dec Alpha	  AXP/VMS,DEC Unix	IEEE		little
   HP		  HP-UX			IEEE		big
   Sun		  Solaris I,II		IEEE		big
   RS/6000	  AIX			IEEE		big
   IBM PC	  Windows, OS/2		IEEE		little
   
4. $HAZARDSRC/doc/blackbox.doc, the documentation for this bundle

5. hmdeadp.xport, a transport file containing estimates used by hzpexmpl.c
   Please note we do not support a Unix ssd (proprietary sas dataset) file
   format.  Instead, you must use a file in SASs universal transport format
   since it is an open, published format. Because of this, this bundle can
   be run on virtually any hardware platform.

6. hmdeadp.sas, a SAS program roughly corresponding to hzpexmpl.c


Please examine $HAZARDSRC/doc/blackbox.doc for more information.  If you
experience any difficulties with the installation or use of this bundle, 
please contact us. The e-mail address is:

blackse@ccf.org (for Dr. Blackstone) 
jehrling@bio.ri.ccf.org (John Ehrlinger)

We would appreciate any feedback about your positive and negative experiences
with the package, as well.
